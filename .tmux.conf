bind r source-file ~/.tmux.conf \; display "Reloaded!"
set -g prefix C-t
unbind C-b

# C-a*2でtmux内のプログラムにC-aを送る
bind C-t send-prefix

# Launch login shell
set-option -g default-shell "${SHELL}"
set -g default-command "${SHELL}"

# c で新しいウィンドウを作成する
bind c new-window -c '#{pane_current_path}'

#選択モードでvimの動作
set-option -g mode-keys vi
bind -T copy-mode-vi y send-keys -X copy-selection

# Vimのキーバインドでペインを移動する

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Window setting

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

bind-key -n M-< swap-window -t -1
bind-key -n M-> swap-window -t +1

# VimのキーバインドでPaneをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# 同時入力
set-option -g synchronize-panes off
bind-key e set-window-option synchronize-panes on \; display 'synchronize begin'
bind-key E set-window-option synchronize-panes off \; display 'synchronize end'
# マウス操作を有効にする
set -g mouse on
bind-key -T edit-mode-vi WheelUpPane send-keys -X scroll-up
bind-key -T edit-mode-vi WheelDownPane send-keys -X scroll-down

# スクロール行数
set -g history-limit 100000

# ウィンドウ削除時に番号を詰める設定
set-option -g renumber-windows on

set -g status-right '#( \
  if git -C #{pane_current_path} rev-parse --is-inside-work-tree >/dev/null 2>&1; then \
    branch=$(git -C #{pane_current_path} rev-parse --abbrev-ref HEAD 2>/dev/null); \
    git_status=$(git -C #{pane_current_path} status --porcelain 2>/dev/null); \
    if [ -n "$git_status" ]; then \
      echo "[$branch ✗]"; \
    else \
      echo "[$branch ✓]"; \
    fi; \
  else \
    echo "[no repo]"; \
  fi) | %H:%M %d-%b-%y'

